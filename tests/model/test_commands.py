from pathlib import Path
import pytest
import struct

from grobro.grobro import parser
from grobro.model.modbus_message import (
    GrowattModbusMessage,
    GrowattModbusFunction,
    GrowattModbusBlock,
    GrowattMetadata,
)
from grobro.grobro.builder import append_crc
from grobro.grobro.builder import scramble
from datetime import datetime
from grobro.model.modbus_function import GrowattModbusFunctionSingle

TEST_DEVICE_ID = "QMN000ABC1D2E3FG"


@pytest.mark.parametrize(
    ("want_msg", "file_name"),
    [
        (
            GrowattModbusMessage(
                unknown=1,
                device_id=TEST_DEVICE_ID,
                function=GrowattModbusFunction.READ_SINGLE_REGISTER,
                register_blocks=[
                    GrowattModbusBlock(
                        start=3,
                        end=3,
                        values=struct.pack(">H", 42),
                    ),
                ],
            ),
            "NeoOutputPowerLimit.bin",
        ),
        (
            GrowattModbusFunctionSingle(
                device_id=TEST_DEVICE_ID,
                function=GrowattModbusFunction.PRESET_SINGLE_REGISTER,
                register=3,
                value=42,
            ),
            "NeoSetOutputPowerLimit.bin",
        ),
        (
            GrowattModbusFunctionSingle(
                device_id=TEST_DEVICE_ID,
                function=GrowattModbusFunction.READ_SINGLE_REGISTER,
                register=3,
                value=3,
            ),
            "NeoReadOutputPowerLimit.bin",
        ),
        (
            GrowattModbusMessage(
                unknown=106,
                device_id=TEST_DEVICE_ID,
                metadata=GrowattMetadata(
                    device_sn=TEST_DEVICE_ID[-10:],
                    timestamp=datetime(2025, 5, 2, 14, 23, 11, 2000),
                ),
                function=GrowattModbusFunction.READ_INPUT_REGISTER,
                register_blocks=[
                    GrowattModbusBlock(
                        start=3000,
                        end=3124,
                        values=b"\x00\x01\x00\x00\x04\xa7\x014\x00\x13\x00\x00\x02T\x01:\x00\x12\x00\x00\x02S\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x03\x13\x88\t/\x00\x04\x00\x00\x04\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t/\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00V\x11\xe8\x00\x00\x00\x01\x00\x00\x07\x13\x00\x00\x07\x9d\x00\x00\x00\x01\x00\x00\x03\xbf\x00\x00\x00\x01\x00\x00\x03\xde\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x0f\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x8e\x01\x8e\x01\x8e\x01\x8e\x00\x00\x11\x80\x00\x00M\xd7\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00\x00P&\x00\x00\x00\x00\x00\x00\x00\x00",
                    ),
                    GrowattModbusBlock(
                        start=3125,
                        end=3249,
                        values=b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x157\x00\x00/\xe4\x00\x01\x00\x00",
                    ),
                ],
            ),
            "NeoInputRegister.bin",
        ),
    ],
)
def test_double(want_msg, file_name):
    print(want_msg, file_name)
    fixture_path = Path(__file__).parent / "data" / file_name
    # test parsing
    with open(fixture_path, "rb") as f:
        want_raw = parser.unscramble(f.read())
        got_msg = type(want_msg).parse_grobro(want_raw)
        print("got", got_msg)
        print("wnt", want_msg)
        assert got_msg == want_msg
    # test building
    got_raw = got_msg.build_grobro()
    print("got raw:", got_raw.hex(" "))
    print("wnt raw:", want_raw[:-2].hex(" "))
    print("parsed again:", type(want_msg).parse_grobro(got_raw + bytes(2)))
    assert got_raw == want_raw[0:-2]


if __name__ == "__main__":
    """
    util to generate syntetic test data.
    should only be used once after verifiying
    that parse + build of new type works with real data
    """
    msgs = [
        (
            "NeoReadOutputPowerLimit.bin",
            NeoReadOutputPowerLimit(device_id=TEST_DEVICE_ID),
        ),
        (
            "NeoSetOutputPowerLimit.bin",
            NeoSetOutputPowerLimit(device_id=TEST_DEVICE_ID, value=42),
        ),
        (
            "NeoOutputPowerLimit.bin",
            NeoOutputPowerLimit(device_id=TEST_DEVICE_ID, value=42),
        ),
        (
            "NeoInputRegister.bin",
            GrowattModbusMessage(
                unknown=106,
                device_id=TEST_DEVICE_ID,
                metadata=GrowattMetadata(
                    device_sn=TEST_DEVICE_ID[-10:],
                    timestamp=datetime(2025, 5, 2, 14, 23, 11, 2000),
                ),
                function=GrowattModbusFunction.READ_INPUT_REGISTER,
                register_blocks=[
                    GrowattModbusBlock(
                        start=3000,
                        end=3124,
                        values=b"\x00\x01\x00\x00\x04\xa7\x014\x00\x13\x00\x00\x02T\x01:\x00\x12\x00\x00\x02S\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x03\x13\x88\t/\x00\x04\x00\x00\x04\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t/\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00V\x11\xe8\x00\x00\x00\x01\x00\x00\x07\x13\x00\x00\x07\x9d\x00\x00\x00\x01\x00\x00\x03\xbf\x00\x00\x00\x01\x00\x00\x03\xde\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x0f\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x8e\x01\x8e\x01\x8e\x01\x8e\x00\x00\x11\x80\x00\x00M\xd7\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00\x00P&\x00\x00\x00\x00\x00\x00\x00\x00",
                    ),
                    GrowattModbusBlock(
                        start=3125,
                        end=3249,
                        values=b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x157\x00\x00/\xe4\x00\x01\x00\x00",
                    ),
                ],
            ),
        ),
    ]
    for msg in msgs:
        with open(f"tests/model/data/{msg[0]}", "wb") as f:
            msg_raw = msg[1].build_grobro()
            f.write(append_crc(scramble(msg_raw)))
